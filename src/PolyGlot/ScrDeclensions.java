/*
 * Copyright (c) 2014, Draque Thompson, draquemail@gmail.com
 * All rights reserved.
 *
 * Licensed under: Creative Commons Attribution-NonCommercial 4.0 International Public License
 * See LICENSE.TXT included with this code to read the full license agreement.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

package PolyGlot;

// TODO: make the fields resize vertically if a font is too large to fit

import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Label;
import java.awt.TextField;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import javax.swing.JFrame;

/**
 *
 * @author draque
 */
public class ScrDeclensions extends javax.swing.JDialog {

    private Map<String, TextField> fieldMap = new HashMap<String, TextField>();
    private DictCore core;
    private ConWord word;
    private Integer typeId;
    private Font conFont;
    private Integer numFields = 0;
    private final Integer textHeight = 25; // TODO: this should be calculated...
    private Map allWordDeclensions;

    public ScrDeclensions(DictCore _core) {
        core = _core;
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    public void setConWord(ConWord _word) {
        word = _word;
    }

    public void setWordType(Integer _typeId) {
        typeId = _typeId;
    }
    
    public void setConFont(Font _conFont) {
        conFont = _conFont;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDeclensions = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Conjugations/Declensions");

        javax.swing.GroupLayout pnlDeclensionsLayout = new javax.swing.GroupLayout(pnlDeclensions);
        pnlDeclensions.setLayout(pnlDeclensionsLayout);
        pnlDeclensionsLayout.setHorizontalGroup(
            pnlDeclensionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 336, Short.MAX_VALUE)
        );
        pnlDeclensionsLayout.setVerticalGroup(
            pnlDeclensionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 439, Short.MAX_VALUE)
        );

        btnCancel.setText("Cancel");
        btnCancel.setToolTipText("Exit screen without saving anything.");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnOk.setText("OK");
        btnOk.setToolTipText("Accept and save changes to declension/conjugations.");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 169, Short.MAX_VALUE)
                        .addComponent(btnOk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel))
                    .addComponent(pnlDeclensions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlDeclensions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOk))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        saveDeclension();
    }//GEN-LAST:event_btnOkActionPerformed

    public static void run(DictCore _core, ConWord _word, Integer _typeId, Font _conFont) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScrExcelImport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScrExcelImport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScrExcelImport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScrExcelImport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        ScrDeclensions s = new ScrDeclensions(_core);
        s.setConWord(_word);
        s.setWordType(_typeId);
        s.setConFont(_conFont);

        s.buildForm();
        
        s.setModal(true);
        s.setVisible(true);
    }
    
    @Override
    public void setVisible(boolean visible) {
        if (core.getDeclensionListTemplate(typeId) == null
                || core.getDeclensionListTemplate(typeId).isEmpty()) {
            InfoBox.info("Declensions", "No declensions for type: " + word.getWordType() 
                    + " set. Declensions can be created per type under the Declensions tab.", this);
            
            this.dispose();
        } else {
            super.setVisible(visible);
        }

    }
    
    private void saveDeclension() {
        core.clearAllDeclensionsWord(word.getId());
        Set<Entry<String, TextField>> saveSet =  fieldMap.entrySet();
        
        for (Entry<String, TextField> e : saveSet) {
            DeclensionNode saveNode = new DeclensionNode(-1);
            String curId = e.getKey();
            TextField curField = e.getValue();
            
            if (curField.getText().trim().equals("")) {
                continue;
            }
            
            saveNode.setValue(curField.getText().trim());
            saveNode.setCombinedDimId(curId);
            
            // declensions per word not saved via int id any longer
            core.addDeclensionToWord(word.getId(), -1, saveNode);
        }
        
        dispose();
    }
    
    /**
     * This is a recursive method that creates all the fields for declension combinations
     * @param depth current depth through declension list
     * @param curId The generated id of the current declension combination
     * @param curLabel the current generated label of this declension
     * @param declensionList list of all declensions
     */
    private void createFields(int depth, String curId, String curLabel, List<DeclensionNode> declensionList) {
        if (depth >= declensionList.size()) {
            Label newLabel = new Label(curLabel);
            TextField newField = new TextField();

            DeclensionNode findDec = core.getDeclensionManager().getDeclensionByCombinedId(word.getId(), curId);
            
            if (findDec != null) {
                newField.setText(findDec.getValue());
            }
            
            if (conFont != null) {
                newField.setFont(conFont);
            }
            
            // TODO: make the declension subtract itself from the total list here (to find deprecated ones)
            
            pnlDeclensions.add(newLabel);
            pnlDeclensions.add(newField);
            
            fieldMap.put(curId, newField);
            numFields++;
            return;
        }
        
        DeclensionNode curNode = declensionList.get(depth);
        Collection<DeclensionDimension> dimensions = curNode.getDimensions();
        Iterator<DeclensionDimension> dimIt = dimensions.iterator();
        
        while (dimIt.hasNext()) {
            DeclensionDimension curDim = dimIt.next();
            
            createFields(depth + 1, curId + curDim.getId().toString() + ",",
                    curLabel + (curLabel.equals("") ? "" : " ") + curDim.getValue(),declensionList);
        }
    }
    
    /**
     * This method kicks off the recursive calls that generate fields for declension combinations
     */
    private void createFields() {
         createFields(0, ",", "", core.getDeclensionListTemplate(typeId));
    }
    
    /**
     * sets basic properties of form based on contents
     */
    private void setFormProps() {
        pnlDeclensions.setSize(pnlDeclensions.getSize().width, numFields * textHeight);        
        pnlDeclensions.setLayout(new GridLayout(0, 2));
        this.setSize(this.getWidth() + 10, pnlDeclensions.getHeight() + 70);
        this.setResizable(false);
    }
      
    /**
     * builds all aspects of the form which are generated per case
     */
    private void buildForm() {
        // creates list of all declensions in word (even deprecated ones
        allWordDeclensions = core.getDeclensionManager().getWordDeclensions(word.getId());
        
        createFields();
        
        // TODO: Create deprecated combinations here
        
        setFormProps();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JPanel pnlDeclensions;
    // End of variables declaration//GEN-END:variables
}
